/**
 * –û–±—ä—è–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–ª—è TypeScript
 */
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã Monaco –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏
import * as monacoType from 'monaco-editor';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø–∏–∑–∞—Ü–∏—é –¥–ª—è –º–æ–¥–µ–ª–∏
type MonacoITextModel = monacoType.editor.ITextModel;

// –û–±—ä—è–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã
declare global {
  interface Window {
    pythonDiagnosticsStore: Record<string, any[]>;
    lastKnownMarkers: Record<string, any[]>;
    debug_markers: boolean;
    forceDiagnosticsRefresh: () => void;
    diagnosticsLastUpdated: number; // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    pendingDiagnostics: boolean; // –§–ª–∞–≥ –æ–∂–∏–¥–∞—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    monaco: any; // –ò—Å–ø–æ–ª—å–∑—É–µ–º any, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –º–µ–∂–¥—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
    lastActiveFilePath?: string; // –ü—É—Ç—å –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∞–∫—Ç–∏–≤–Ω–æ–º—É —Ñ–∞–π–ª—É
    getPythonDiagnostics?: () => any[];
    updatePythonDiagnostics?: () => Promise<any>;
  }
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —á–∏—Å–ª–æ–≤–æ–π –∫–æ–¥ –æ—à–∏–±–∫–∏ –≤ —Å—Ç—Ä–æ–∫–æ–≤—ã–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å IMarkerData
 * @param marker –ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Ä–∫–µ—Ä
 * @returns –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–∞—Ä–∫–µ—Ä —Å –∫–æ–¥–æ–º –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
 */
export function fixMarkerCode(marker: any): any {
  if (marker === null || typeof marker !== 'object') {
    return marker;
  }
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ–≤–æ–π –∫–æ–¥ –≤ —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (marker.code !== undefined && typeof marker.code === 'number') {
    return {
      ...marker,
      code: marker.code.toString()
    };
  }

  return marker;
}

/**
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –º–∞—Å—Å–∏–≤ –º–∞—Ä–∫–µ—Ä–æ–≤, –ø—Ä–µ–æ–±—Ä–∞–∑—É—è —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–¥—ã –≤ —Å—Ç—Ä–æ–∫–∏
 * @param markers –ú–∞—Å—Å–∏–≤ –º–∞—Ä–∫–µ—Ä–æ–≤
 * @returns –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –º–∞—Ä–∫–µ—Ä–æ–≤
 */
export function fixMarkers(markers: any[]): any[] {
  if (!Array.isArray(markers)) {
    console.warn('fixMarkers: –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º', markers);
    return [];
  }
  
  return markers.map(fixMarkerCode);
}

/**
 * –í–∫–ª—é—á–∞–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤
 */
export function enableMarkerDebug() {
  window.debug_markers = true;
  console.log('üîç –û—Ç–ª–∞–¥–∫–∞ –º–∞—Ä–∫–µ—Ä–æ–≤ –≤–∫–ª—é—á–µ–Ω–∞');
}

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä–∫–µ—Ä–∞—Ö –≤ –∫–æ–Ω—Å–æ–ª—å (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏)
 */
function logMarkerInfo(message: string, ...data: any[]) {
  if (window.debug_markers) {
    console.log(`üîç [Marker] ${message}`, ...data);
  }
}

/**
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
 */
export function forceRefreshAllDiagnostics() {
  logMarkerInfo('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫');
  
  try {
    if (window && window.monaco && window.monaco.editor) {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      window.pendingDiagnostics = true;
      
      const models = window.monaco.editor.getModels();
      const allMarkers: any[] = [];
      
      models.forEach((model: any) => {
        if (model && model.uri) {
          const uri = model.uri.toString();
          const markers = window.monaco.editor.getModelMarkers({ resource: model.uri });
          
          if (markers && markers.length > 0) {
            logMarkerInfo(`–ú–æ–¥–µ–ª—å ${uri} –∏–º–µ–µ—Ç ${markers.length} –º–∞—Ä–∫–µ—Ä–æ–≤`, markers);
            allMarkers.push(...markers);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            if (!window.pythonDiagnosticsStore) {
              window.pythonDiagnosticsStore = {};
            }
            window.pythonDiagnosticsStore[uri] = markers;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ lastKnownMarkers –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            if (!window.lastKnownMarkers) {
              window.lastKnownMarkers = {};
            }
            window.lastKnownMarkers[uri] = markers;
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            if (typeof document !== 'undefined' && document) {
              document.dispatchEvent(new CustomEvent('diagnostics-updated', { 
                detail: { uri, markers, forceRefresh: true, timestamp: Date.now() } 
              }));
            }
          }
        }
      });
      
      logMarkerInfo(`–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ ${allMarkers.length} –º–∞—Ä–∫–µ—Ä–æ–≤`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      window.diagnosticsLastUpdated = Date.now();
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
      window.pendingDiagnostics = false;
      
      // –¢—Ä–∏–≥–≥–µ—Ä–∏–º —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
      if (typeof document !== 'undefined' && document) {
        document.dispatchEvent(new CustomEvent('problems-updated', {
          detail: { totalMarkers: allMarkers.length, timestamp: window.diagnosticsLastUpdated }
        }));
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏–π —Å —Ä–∞–∑–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        const intervals = [100, 500, 1000, 2000];
        intervals.forEach(delay => {
          setTimeout(() => {
            if (typeof document !== 'undefined' && document) {
              document.dispatchEvent(new CustomEvent('force-update-problems', {
                detail: { 
                  origin: 'forceRefreshAllDiagnostics', 
                  totalMarkers: allMarkers.length,
                  delay: delay 
                }
              }));
            }
          }, delay);
        });
      }
      
      return allMarkers.length;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫:', error);
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    window.pendingDiagnostics = false;
  }
  
  return 0;
}

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–∞—Ä–∫–µ—Ä—ã –≤ –º–æ–¥–µ–ª—å, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è—è –∫–æ–¥—ã –æ—à–∏–±–æ–∫
 * @param monaco –≠–∫–∑–µ–º–ø–ª—è—Ä Monaco Editor
 * @param model –ú–æ–¥–µ–ª—å Monaco
 * @param owner –í–ª–∞–¥–µ–ª–µ—Ü –º–∞—Ä–∫–µ—Ä–æ–≤
 * @param markers –ú–∞—Å—Å–∏–≤ –º–∞—Ä–∫–µ—Ä–æ–≤
 */
export function safeSetModelMarkers(monaco: any, model: any, owner: string, markers: any[]): void {
  if (!monaco || !model || !monaco.editor || typeof monaco.editor.setModelMarkers !== 'function') {
    console.error('Monaco editor –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥ setModelMarkers');
    return;
  }
  
  // –í–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–∫—É –º–∞—Ä–∫–µ—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  if (window.debug_markers === undefined) {
    window.debug_markers = true;
  }
  
  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫
  if (!window.forceDiagnosticsRefresh) {
    window.forceDiagnosticsRefresh = forceRefreshAllDiagnostics;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  if (typeof window !== 'undefined') {
    if (!window.pythonDiagnosticsStore) {
      window.pythonDiagnosticsStore = {};
    }
    if (window.diagnosticsLastUpdated === undefined) {
      window.diagnosticsLastUpdated = 0;
    }
  }
  
  try {
    const fixedMarkers = fixMarkers(markers);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—É—é –æ—à–∏–±–∫—É —Å null –º–∞—Ä–∫–µ—Ä–∞–º–∏
    const validMarkers = fixedMarkers.filter(marker => marker !== null && typeof marker === 'object');
    
    logMarkerInfo(`–£—Å—Ç–∞–Ω–æ–≤–∫–∞ ${validMarkers.length} –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏`, model.uri?.toString());
    
    if (validMarkers.length > 0) {
      logMarkerInfo('–ü—Ä–∏–º–µ—Ä –º–∞—Ä–∫–µ—Ä–∞:', JSON.stringify(validMarkers[0], null, 2));
    }
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞—Ä–∫–µ—Ä–æ–≤ –≤ –º–æ–¥–µ–ª—å
    monaco.editor.setModelMarkers(model, owner, validMarkers);
    
    // –ü–æ–ª—É—á–∞–µ–º URI –º–æ–¥–µ–ª–∏
    if (model && model.uri) {
      const uri = model.uri.toString();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      if (typeof window !== 'undefined' && window.pythonDiagnosticsStore) {
        window.pythonDiagnosticsStore[uri] = validMarkers;
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ä–∫–µ—Ä–æ–≤
        if (validMarkers && validMarkers.length > 0) {
          logMarkerInfo(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${validMarkers.length} –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è ${uri}`);
          console.log(`–ú–∞—Ä–∫–µ—Ä—ã –¥–ª—è ${uri}:`, JSON.stringify(validMarkers.slice(0, 2))); // –í—Å–µ–≥–¥–∞ –ª–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 2 –º–∞—Ä–∫–µ—Ä–∞
        }
      }
      
      // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
      window.lastKnownMarkers = window.lastKnownMarkers || {};
      window.lastKnownMarkers[uri] = validMarkers;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      window.diagnosticsLastUpdated = Date.now();
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ - –≤–∞–∂–Ω–æ! –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
      // –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã –µ—Å–ª–∏ –æ–¥–Ω–æ —Å–æ–±—ã—Ç–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, —Å—Ä–∞–±–æ—Ç–∞–ª–æ –¥—Ä—É–≥–æ–µ
      try {
        // 1. –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ diagnostics-updated
        const diagEvent = new CustomEvent('diagnostics-updated', { 
          detail: { uri, markers: validMarkers, timestamp: window.diagnosticsLastUpdated } 
        });
        if (typeof document !== 'undefined' && document) {
          document.dispatchEvent(diagEvent);
        }
        
        // 2. –û–±—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
        if (typeof document !== 'undefined' && document) {
          document.dispatchEvent(new CustomEvent('problems-updated', {
            detail: { uri, markers: validMarkers, count: validMarkers.length, timestamp: window.diagnosticsLastUpdated }
          }));
        }
        
        // 3. –°–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ 
        if (typeof document !== 'undefined' && document) {
          document.dispatchEvent(new CustomEvent('monaco-markers-changed', {
            detail: {
              uri,
              filePath: uri, 
              markers: validMarkers,
              owner,
              hasErrors: validMarkers.some(m => m.severity === 1),
              hasWarnings: validMarkers.some(m => m.severity === 2),
              timestamp: window.diagnosticsLastUpdated
            }
          }));
        }
        
        // 4-6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π —Å —Ä–∞–∑–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        const delays = [100, 500, 1000];
        delays.forEach(delay => {
          setTimeout(() => {
            if (typeof document !== 'undefined' && document) {
              document.dispatchEvent(new CustomEvent('force-update-problems', {
                detail: { origin: 'safeSetModelMarkers', uri, delay }
              }));
            }
          }, delay);
          
          setTimeout(() => {
            if (typeof document !== 'undefined' && document) {
              document.dispatchEvent(new CustomEvent('refresh-problems-panel', {
                detail: { uri, markers: validMarkers.length, delay }
              }));
            }
          }, delay + 50);
        });
        
        logMarkerInfo('–°–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—É—é –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–±—ã—Ç–∏–π
        if (validMarkers.length > 0 && Math.random() < 0.3) {
          setTimeout(() => {
            logMarkerInfo('–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏');
            if (typeof document !== 'undefined' && document) {
              document.dispatchEvent(new CustomEvent('force-update-problems', {
                detail: { origin: 'safeSetModelMarkers-retry', uri }
              }));
            }
          }, 2000);
        }
      } catch (eventError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è diagnostics-updated:', eventError);
      }
    } else {
      console.warn('Model URI is undefined or null, cannot save markers');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –º–∞—Ä–∫–µ—Ä–æ–≤:', error);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –≤–æ –≤—Å–µ—Ö –º–æ–¥–µ–ª—è—Ö –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ,
 * –µ—Å–ª–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
 * @param forceUpdate –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏
 */
export function checkAndRefreshDiagnostics(forceUpdate = false): void {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const now = Date.now();
    const lastUpdate = window.diagnosticsLastUpdated || 0;
    const timeSinceLastUpdate = now - lastUpdate;
    
    // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤–æ–µ
    if (window.pendingDiagnostics) {
      logMarkerInfo('–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 5 —Å–µ–∫—É–Ω–¥ –∏–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if (forceUpdate || timeSinceLastUpdate > 5000) {
      logMarkerInfo(`–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫ (–ø—Ä–æ—à–ª–æ ${timeSinceLastUpdate}ms)`);
      forceRefreshAllDiagnostics();
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ checkAndRefreshDiagnostics:', error);
  }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –æ—à–∏–±–æ–∫ Python –≤–æ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–π–ª–∞—Ö
 */
export function initPeriodicDiagnosticChecks(): void {
  console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ Python-–æ—à–∏–±–æ–∫');
  
  // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ä–∞–∑—É
  checkPythonErrorsInAllFiles();
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
  setInterval(() => {
    checkPythonErrorsInAllFiles();
  }, 5000);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  document.addEventListener('active-file-changed', () => {
    setTimeout(() => checkPythonErrorsInAllFiles(), 200);
  });
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ Python —Ñ–∞–π–ª—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫
 */
function checkPythonErrorsInAllFiles(): void {
  if (typeof window === 'undefined' || !window.monaco || !window.monaco.editor) {
    console.warn('Monaco –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—à–∏–±–æ–∫');
    return;
  }
  
  const monaco = window.monaco;
  const models = monaco.editor.getModels() || [];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏
  models.forEach((model: monacoType.editor.ITextModel) => {
    const uri = model.uri.toString();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ Python —Ñ–∞–π–ª—ã
    if (uri.endsWith('.py')) {
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Python —Ñ–∞–π–ª–∞: ${uri}`);
      checkPythonErrorsInFile(model);
    }
  });
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –ø—Ä–æ–±–ª–µ–º
  setTimeout(() => {
    if (typeof document !== 'undefined' && document) {
      document.dispatchEvent(new CustomEvent('markers-updated'));
      document.dispatchEvent(new CustomEvent('refresh-problems-panel'));
    }
  }, 100);
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç Python —Ñ–∞–π–ª –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
 * @param model –ú–æ–¥–µ–ª—å —Ç–µ–∫—Å—Ç–∞ Monaco
 */
function checkPythonErrorsInFile(model: monacoType.editor.ITextModel): void {
  const monaco = (window as any).monaco;
  if (!monaco || !monaco.editor) {
    console.warn('Monaco –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—à–∏–±–æ–∫');
    return;
  }
  
  // –¢–æ–ª—å–∫–æ –¥–ª—è Python —Ñ–∞–π–ª–æ–≤
  const uri = model.uri.toString();
  if (!uri.endsWith('.py')) return;
  
  const content = model.getValue();
  const lines = content.split('\n');
  const fileName = uri.split('/').pop() || '';
  
  console.log(`üêç –ü—Ä–æ–≤–µ—Ä–∫–∞ Python —Ñ–∞–π–ª–∞: ${fileName} (${lines.length} —Å—Ç—Ä–æ–∫)`);
  
  // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
  monaco.editor.setModelMarkers(model, 'python', []);
  
  // –°–æ–±–∏—Ä–∞–µ–º –æ—à–∏–±–∫–∏
  const errors: monacoType.editor.IMarkerData[] = [];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫–∏ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
  lines.forEach((line: string, lineIndex: number) => {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—à–Ω–∏–µ –∑–∞–ø—è—Ç—ã–µ –≤ —Å–ø–∏—Å–∫–∞—Ö/–∫–æ—Ä—Ç–µ–∂–∞—Ö
    if (line.trim().match(/,\s*\]/) || line.trim().match(/,\s*\)/)) {
      errors.push({
        severity: monaco.MarkerSeverity.Error,
        message: '–õ–∏—à–Ω—è—è –∑–∞–ø—è—Ç–∞—è –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–æ–π',
        startLineNumber: lineIndex + 1,
        startColumn: line.indexOf(',') + 1,
        endLineNumber: lineIndex + 1,
        endColumn: line.indexOf(',') + 2
      });
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ —Å —á–∏—Å–ª–∞–º–∏
    if (line.includes('==') || line.includes('!=')) {
      // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å —á–∏—Å–ª–æ–º
      if (line.match(/'.*'.*==.*\d/) || line.match(/\d.*==.*'.*'/) ||
          line.match(/".*".*==.*\d/) || line.match(/\d.*==.*".*"/)) {
        errors.push({
          severity: monaco.MarkerSeverity.Error,
          message: '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å —á–∏—Å–ª–æ–º –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –æ—à–∏–±–∫–µ',
          startLineNumber: lineIndex + 1,
          startColumn: 1,
          endLineNumber: lineIndex + 1,
          endColumn: line.length + 1
        });
      }
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å
    if (line.match(/\/\s*0\b/) || line.match(/\/\s*0\.0\b/)) {
      errors.push({
        severity: monaco.MarkerSeverity.Error,
        message: '–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å',
        startLineNumber: lineIndex + 1,
        startColumn: line.indexOf('/') + 1,
        endLineNumber: lineIndex + 1,
        endColumn: line.indexOf('/') + 2
      });
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–µ –¥–≤–æ–µ—Ç–æ—á–∏–µ –≤ —É—Å–ª–æ–≤–∏—è—Ö, —Ü–∏–∫–ª–∞—Ö –∏ —Ñ—É–Ω–∫—Ü–∏—è—Ö
    if (line.match(/\b(if|elif|else|for|while|def|class)\b.*[^\:]\s*$/)) {
      errors.push({
        severity: monaco.MarkerSeverity.Error,
        message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–≤–æ–µ—Ç–æ—á–∏–µ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏',
        startLineNumber: lineIndex + 1,
        startColumn: line.length,
        endLineNumber: lineIndex + 1,
        endColumn: line.length + 1
      });
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Å–∫–æ–±–∫–∏
    const openBrackets = (line.match(/\(/g) || []).length;
    const closeBrackets = (line.match(/\)/g) || []).length;
    if (openBrackets > closeBrackets && !lines.slice(lineIndex + 1).some(l => l.includes(')'))) {
      errors.push({
        severity: monaco.MarkerSeverity.Error,
        message: '–ù–µ–∑–∞–∫—Ä—ã—Ç–∞—è —Å–∫–æ–±–∫–∞',
        startLineNumber: lineIndex + 1,
        startColumn: 1,
        endLineNumber: lineIndex + 1,
        endColumn: line.length + 1
      });
    }
    
    // 6. –û—à–∏–±–∫–∏ –æ—Ç—Å—Ç—É–ø–æ–≤
    if (lineIndex > 0 && line.trim() && lines[lineIndex - 1].trim().endsWith(':')) {
      const currentIndent = line.match(/^\s*/)[0].length;
      const prevIndent = lines[lineIndex - 1].match(/^\s*/)[0].length;
      
      if (currentIndent <= prevIndent) {
        errors.push({
          severity: monaco.MarkerSeverity.Error,
          message: '–û–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ —Å –¥–≤–æ–µ—Ç–æ—á–∏–µ–º',
          startLineNumber: lineIndex + 1,
          startColumn: 1,
          endLineNumber: lineIndex + 1,
          endColumn: currentIndent + 1
        });
      }
    }
    
    // 7. –û—à–∏–±–∫–∏ –≤ f-—Å—Ç—Ä–æ–∫–∞—Ö
    if (line.includes('f"') || line.includes("f'")) {
      if ((line.includes('{') && !line.includes('}')) || 
          (line.match(/{/g) || []).length !== (line.match(/}/g) || []).length) {
        errors.push({
          severity: monaco.MarkerSeverity.Error,
          message: '–ù–µ–∑–∞–∫—Ä—ã—Ç–∞—è —Ñ–∏–≥—É—Ä–Ω–∞—è —Å–∫–æ–±–∫–∞ –≤ f-—Å—Ç—Ä–æ–∫–µ',
          startLineNumber: lineIndex + 1,
          startColumn: line.indexOf('{') + 1,
          endLineNumber: lineIndex + 1,
          endColumn: line.indexOf('{') + 2
        });
      }
    }
  });
  
  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤ Monaco
  if (errors.length > 0 && monaco && monaco.editor) {
    console.log(`üêõ –ù–∞–π–¥–µ–Ω–æ ${errors.length} –æ—à–∏–±–æ–∫ –≤ Python —Ñ–∞–π–ª–µ ${fileName}`);
    monaco.editor.setModelMarkers(model, 'python', errors);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    if (typeof window !== 'undefined') {
      if (!window.lastKnownMarkers) {
        window.lastKnownMarkers = {};
      }
      window.lastKnownMarkers[uri] = errors;
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–æ–≤—ã—Ö –º–∞—Ä–∫–µ—Ä–∞—Ö
      if (typeof document !== 'undefined' && document) {
        document.dispatchEvent(new CustomEvent('markers-updated'));
      }
    }
  } else {
    console.log(`‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ñ–∞–π–ª–µ ${fileName}`);
  }
} 