/**
 * Python LSP Starter
 * 
 * –ú–æ–¥—É–ª—å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Python LSP —Å–µ—Ä–≤–µ—Ä–æ–º
 */

import { languageServerManager } from './monaco-lsp-server-manager';
import { lspDocumentManager } from './lsp-document-manager';
import { MonacoLSPDiagnostics } from './monaco-lsp-diagnostics';

// –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∏–ø–æ–≤
import * as monaco from 'monaco-editor';

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ LSP
interface DiagnosticPosition {
  line: number;
  character: number;
}

interface DiagnosticRange {
  start: DiagnosticPosition;
  end: DiagnosticPosition;
}

interface Diagnostic {
  range: DiagnosticRange;
  severity?: DiagnosticSeverity;
  code?: string | number;
  source?: string;
  message: string;
  relatedInformation?: any[];
  tags?: number[];
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π –≤–∞–∂–Ω–æ—Å—Ç–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
enum DiagnosticSeverity {
  Error = 1,
  Warning = 2,
  Information = 3,
  Hint = 4
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
let pythonLSPInitialized = false;
let diagnosticHandlersInitialized = false;

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
const diagnosticsUpdateDebounce = new Map<string, NodeJS.Timeout>();
const diagnosticsUpdateDelay = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞ –∑–∞–¥–µ—Ä–∂–∫–∏

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Python LSP —Å–µ—Ä–≤–µ—Ä–∞
 * @returns –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
 */
export async function initializePythonLSP(): Promise<boolean> {
  console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Python LSP —Å–µ—Ä–≤–µ—Ä–∞...');
  
  if (pythonLSPInitialized) {
    console.log('Python LSP —Å–µ—Ä–≤–µ—Ä —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    return true;
  }
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —è–∑—ã–∫–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
    if (!languageServerManager) {
      console.error('–ú–µ–Ω–µ–¥–∂–µ—Ä —è–∑—ã–∫–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
      return false;
    }
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Python —Å–µ—Ä–≤–µ—Ä, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    if (!languageServerManager.getServer('python')) {
      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è Python LSP
      const pythonConfig = {
        id: 'python',
        name: 'Python Language Server',
        supportedLanguages: ['python'],
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Python LSP
        serverOptions: {
          // –£–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
          initializationOptions: {
            // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
            diagnostics: { enable: true, lint: { enabled: true } },
            completion: { enabled: true },
            hover: { enabled: true },
            // –í–∫–ª—é—á–∞–µ–º pylint –∏ pycodestyle –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            plugins: {
              pycodestyle: { enabled: true }, 
              pylint: { enabled: true },
              jedi_completion: { enabled: true },
              jedi_hover: { enabled: true },
              jedi_references: { enabled: true },
              jedi_definition: { enabled: true },
              jedi_symbols: { enabled: true },
              jedi_signature_help: { enabled: true },
              pyflakes: { enabled: true },
              mccabe: { enabled: true },
              preload: { enabled: true }
            }
          }
        }
      };
      
      languageServerManager.registerServer(pythonConfig);
      console.log('Python LSP —Å–µ—Ä–≤–µ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π');
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º Python —Å–µ—Ä–≤–µ—Ä
    const success = await languageServerManager.startServer('python');
    
    if (success) {
      console.log('Python LSP —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
      pythonLSPInitialized = true;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      if (!(window as any).pythonDiagnosticsStore) {
        console.warn('–•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Python –Ω–µ —Å–æ–∑–¥–∞–Ω–æ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ registerPython –±—ã–ª –≤—ã–∑–≤–∞–Ω.');
      }
      
      return true;
    } else {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Python LSP —Å–µ—Ä–≤–µ—Ä');
      return false;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Python LSP —Å–µ—Ä–≤–µ—Ä–∞:', error);
    return false;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Python LSP —Å–µ—Ä–≤–µ—Ä—É
 * @returns –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 */
export function isPythonLSPConnected(): boolean {
  try {
    if (!languageServerManager) return false;
    return languageServerManager.isServerRunning('python');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Python LSP —Å–µ—Ä–≤–µ—Ä—É:', error);
    return false;
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ Python LSP —Å–µ—Ä–≤–µ—Ä–∞
 * @returns –û–±—ä–µ–∫—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º —Å–µ—Ä–≤–µ—Ä–∞
 */
export function getPythonLSPStatus(): { running: boolean, message: string } {
  try {
    if (!languageServerManager) {
      return { running: false, message: '–ú–µ–Ω–µ–¥–∂–µ—Ä —è–∑—ã–∫–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω' };
    }
    
    const isRunning = languageServerManager.isServerRunning('python');
    
    if (isRunning) {
      return { 
        running: true, 
        message: 'Python LSP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç'
      };
    } else {
      return { running: false, message: 'Python LSP —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω' };
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ Python LSP —Å–µ—Ä–≤–µ—Ä–∞:', error);
    return { running: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞' };
  }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö Python —Ñ–∞–π–ª–æ–≤
 * @returns Promise —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
 */
export async function updateAllPythonDiagnostics(): Promise<boolean> {
  try {
    console.log('üêç –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö Python —Ñ–∞–π–ª–æ–≤...');
    
    if (!isPythonLSPConnected()) {
      console.warn('Python LSP —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
      const initialized = await initializePythonLSP();
      if (!initialized) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Python LSP —Å–µ—Ä–≤–µ—Ä');
        return false;
      }
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    const allDocuments = lspDocumentManager.getAllDocumentUris();
    if (!allDocuments || allDocuments.length === 0) {
      console.log('–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
      return true;
    }
    
    // –í—ã–±–∏—Ä–∞–µ–º Python –¥–æ–∫—É–º–µ–Ω—Ç—ã
    const pythonDocuments = allDocuments.filter(uri => 
      uri.endsWith('.py') || uri.endsWith('.pyw') || uri.endsWith('.pyi') ||
      lspDocumentManager.getDocument(uri)?.languageId === 'python'
    );
    
    if (pythonDocuments.length === 0) {
      console.log('–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö Python –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
      return true;
    }
    
    console.log(`üêç –û–±—Ä–∞–±–æ—Ç–∫–∞ ${pythonDocuments.length} Python —Ñ–∞–π–ª–æ–≤...`);
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ Python –¥–æ–∫—É–º–µ–Ω—Ç–∞
    for (const uri of pythonDocuments) {
      try {
        await updatePythonDiagnosticsForFile(uri);
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è ${uri}:`, error);
      }
    }
    
    console.log(`üêç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –¥–ª—è ${pythonDocuments.length} Python —Ñ–∞–π–ª–æ–≤`);
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö Python –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫:', error);
    return false;
  }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ Python —Ñ–∞–π–ª–∞
 * @param filepath –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ URI
 * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export async function updatePythonDiagnosticsForFile(fileURI: string): Promise<void> {
  try {
    const isPythonFile = fileURI.endsWith('.py') || fileURI.endsWith('.pyi');
    if (!isPythonFile) {
      return;
    }

    if (!window.pyLspConn) {
      console.warn('LSP not connected, cannot update diagnostics');
      return;
    }

    console.log(`üêç Updating diagnostics for ${fileURI}`);

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    const fileContent = await getFileContent(fileURI);
    if (!fileContent) {
      console.warn(`Could not get content for ${fileURI}`);
      return;
    }

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å
    const normalizedUri = normalizeFileURI(fileURI);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ LSP
    addDocumentToLsp(normalizedUri, fileContent);
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ LSP
    await validatePythonFile(normalizedUri, fileContent);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
    if (window.pythonDiagnosticsStore && window.monaco) {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
      const markers = window.pythonDiagnosticsStore.getMarkersForUri(normalizedUri);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Ä–∫–µ—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Monaco Editor
      const monacoMarkers = markers.map((marker: any) => ({
        severity: marker.severity,
        message: marker.message,
        startLineNumber: marker.range.start.line + 1,
        startColumn: marker.range.start.character + 1,
        endLineNumber: marker.range.end.line + 1,
        endColumn: marker.range.end.character + 1,
        source: marker.source || 'Python'
      }));
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
      window.monaco.editor.setModelMarkers(
        getModelForUri(normalizedUri) || null,
        'python',
        monacoMarkers
      );
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞–º–∏ –¥–ª—è –ø–∞–Ω–µ–ª–∏ –ø—Ä–æ–±–ª–µ–º
      const diagnosticEvent = new CustomEvent('pythonDiagnosticsUpdated', {
        detail: getPythonDiagnostics()
      });
      window.dispatchEvent(diagnosticEvent);
    }
  } catch (error) {
    console.error(`Error updating Python diagnostics for ${fileURI}:`, error);
  }
}

/**
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è Python —Ñ–∞–π–ª–∞
 * @param filepath –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ URI
 * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export async function forcePythonDiagnosticsUpdate(filepath: string) {
  console.log(`üêç –†—É—á–Ω–æ–π –∑–∞–ø—Ä–æ—Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è: ${filepath}`);
  
  const result = await updatePythonDiagnosticsForFile(filepath);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –Ω–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏
  if (result && typeof window !== 'undefined' && (window as any).pythonDiagnosticsStore) {
    // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    const diagnosticsStore = (window as any).pythonDiagnosticsStore;
    
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –º–æ–¥–µ–ª—å URI –¥–ª—è —Ñ–∞–π–ª–∞
      let fileUri: string;
      
      if (filepath.startsWith('file://')) {
        fileUri = filepath;
      } else {
        fileUri = `file://${filepath.replace(/\\/g, '/')}`;
      }
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ URI
      let monacoUri: string;
      try {
        if (window.monaco) {
          monacoUri = window.monaco.Uri.file(filepath.replace(/\\/g, '/')).toString();
        } else {
          monacoUri = fileUri;
        }
      } catch (e) {
        monacoUri = fileUri;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–µ –≤–µ—Ä—Å–∏–∏ URI
      let markers = diagnosticsStore.getMarkers(fileUri);
      if (!markers || markers.length === 0) {
        markers = diagnosticsStore.getMarkers(monacoUri);
      }
      
      // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –º–∞—Ä–∫–µ—Ä—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      if (markers && markers.length > 0) {
        console.log(`üêç –ù–∞–π–¥–µ–Ω–æ ${markers.length} –ø—Ä–æ–±–ª–µ–º –≤ —Ñ–∞–π–ª–µ ${filepath}`);
        
        const errorCount = markers.filter((m: any) => 
          m.severity === (window.monaco?.MarkerSeverity.Error || 8)
        ).length;
        
        const warningCount = markers.filter((m: any) => 
          m.severity === (window.monaco?.MarkerSeverity.Warning || 4)
        ).length;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const message = `Python: ${errorCount} –æ—à–∏–±–æ–∫, ${warningCount} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π`;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if (errorCount > 0 || warningCount > 0) {
          document.dispatchEvent(new CustomEvent('show-notification', {
            detail: {
              message,
              type: errorCount > 0 ? 'error' : 'warning',
              duration: 5000
            }
          }));
        }
      } else {
        console.log(`üêç –ü—Ä–æ–±–ª–µ–º –≤ —Ñ–∞–π–ª–µ ${filepath} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        document.dispatchEvent(new CustomEvent('show-notification', {
          detail: {
            message: 'Python: –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
            type: 'success',
            duration: 3000
          }
        }));
      }
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ–∫–æ—Ä–∞—Ü–∏–∏ –æ—à–∏–±–æ–∫ –∫–æ –≤—Å–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –ø—Ä–æ–±–ª–µ–º
      if (window.monaco) {
        if (window.setupAllErrorDecorations && typeof window.setupAllErrorDecorations === 'function') {
          // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –¥–µ–∫–æ—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤
          window.setupAllErrorDecorations();
        } else if (window.forceUpdateAllDecorations && typeof window.forceUpdateAllDecorations === 'function') {
          // –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ setupAllErrorDecorations –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞
          window.forceUpdateAllDecorations();
        }
      }
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', e);
    }
  }
  
  return result;
}

/**
 * –û—á–∏—Å—Ç–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö Python —Ñ–∞–π–ª–æ–≤
 */
export function clearAllPythonDiagnostics(): void {
  if ((window as any).pythonDiagnosticsStore) {
    (window as any).pythonDiagnosticsStore.clearAllMarkers();
    console.log('–û—á–∏—â–µ–Ω—ã –≤—Å–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Python');
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Python
 */
export function isPythonDiagnosticsAvailable(): boolean {
  return !!(window as any).pythonDiagnosticsStore;
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –≤–∞–∂–Ω–æ—Å—Ç–∏ LSP –≤ —É—Ä–æ–≤–µ–Ω—å Monaco
 * @param severity –£—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
 * @returns –£—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏ –¥–ª—è Monaco
 */
const mapSeverity = (severity: DiagnosticSeverity | undefined): number => {
  if (!severity) return 1; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Info

  switch (severity) {
    case DiagnosticSeverity.Error:
      return 8; // monaco.MarkerSeverity.Error
    case DiagnosticSeverity.Warning:
      return 4; // monaco.MarkerSeverity.Warning
    case DiagnosticSeverity.Information:
      return 2; // monaco.MarkerSeverity.Info
    case DiagnosticSeverity.Hint:
      return 1; // monaco.MarkerSeverity.Hint
    default:
      return 2; // Info –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  }
};

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Python –¥–ª—è –º–æ–¥–µ–ª–∏
 * @param model –ú–æ–¥–µ–ª—å —Ç–µ–∫—Å—Ç–∞ Monaco
 * @param pyDiags –ú–∞—Å—Å–∏–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫ Python
 */
const updatePythonDiagnostics = (
  model: any, // –ò—Å–ø–æ–ª—å–∑—É–µ–º any –¥–ª—è –º–æ–¥–µ–ª–∏ Monaco
  pyDiags: Diagnostic[]
) => {
  if (!model || !window.monaco?.editor?.setModelMarkers) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É: Monaco –∏–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
    return;
  }

  try {
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –º—ã –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å –∏–∑ –Ω–∏—Ö
    console.log(`[Python] –ü–æ–ª—É—á–µ–Ω–æ ${pyDiags.length} –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
    
    // –£—Å–∏–ª–∏–≤–∞–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
    let syntaxErrorDetected = false;
    let markers = pyDiags.map((diag) => {
      const startPos = diag.range.start;
      const endPos = diag.range.end;
      
      // –î–µ–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º–∏
      let message = diag.message;
      
      // –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (message.length > 100) {
        message = message.substring(0, 97) + '...';
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–æ–π
      const isSyntaxError = 
        message.includes('SyntaxError') || 
        message.includes('—Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞') ||
        message.includes('–Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å') ||
        message.includes('invalid syntax') ||
        message.includes('expected') ||
        message.includes('–æ–∂–∏–¥–∞–ª–æ—Å—å');
      
      if (isSyntaxError) {
        syntaxErrorDetected = true;
        // –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ–º –∏ —É–ª—É—á—à–∞–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
        message = `–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${message}`;
      }
      
      // –£–¥–∞–ª—è–µ–º –∏–∑–±—ã—Ç–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      message = message
        .replace(/Python \[\d+(\.\d+)*\]/g, '')
        .replace(/\(pycodestyle\)/g, '')
        .replace(/\(pylint\)/g, '')
        .replace(/\(mypy\)/g, '')
        .replace(/\(pyflakes\)/g, '')
        .replace(/(^\s+|\s+$)/g, ''); // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–æ—Ç–∫—É—é –≤–µ—Ä—Å–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const shortMessage = message.length > 50 ? message.substring(0, 47) + '...' : message;

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ–ª–µ–µ –≤—ã—Å–æ–∫—É—é –≤–∞–∂–Ω–æ—Å—Ç—å –¥–ª—è —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
      let severity = mapSeverity(diag.severity);
      if (isSyntaxError) {
        severity = 8; // MarkerSeverity.Error
      }

      return {
        severity: severity,
        startLineNumber: startPos.line + 1,
        startColumn: startPos.character + 1,
        endLineNumber: endPos.line + 1,
        endColumn: endPos.character + 1,
        message: message,
        shortMessage: shortMessage, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        code: diag.code,
        source: diag.source || 'Python', // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
        isSyntaxError: isSyntaxError // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏
      };
    });
    
    // –ï—Å–ª–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ –≤—ã—è–≤–∏–ª –æ—à–∏–±–æ–∫, –Ω–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏,
    // –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
    if (!syntaxErrorDetected && model && model.getValue) {
      const content = model.getValue();
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—á–µ–≤–∏–¥–Ω—ã—Ö —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å LSP
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Å–∫–æ–±–∫–∏, –∫–∞–≤—ã—á–∫–∏ –∏ —Ç.–¥.
        const lines = content.split('\n');
        for (let i = 0; i < lines.length; i++) {
          const line = lines[i];
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
          const unclosedString = line.match(/(['"])(?:(?!\1)[^\\]|\\[\s\S])*$/);
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Å–∫–æ–±–∫–∏
          const openBrackets = (line.match(/\(/g) || []).length;
          const closeBrackets = (line.match(/\)/g) || []).length;
          const openSquare = (line.match(/\[/g) || []).length;
          const closeSquare = (line.match(/\]/g) || []).length;
          const openCurly = (line.match(/\{/g) || []).length;
          const closeCurly = (line.match(/\}/g) || []).length;
          
          if (unclosedString || 
              openBrackets > closeBrackets || 
              openSquare > closeSquare || 
              openCurly > closeCurly) {
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–∞—à–ª–∏
            markers.push({
              severity: 8, // MarkerSeverity.Error
              startLineNumber: i + 1,
              startColumn: 1,
              endLineNumber: i + 1,
              endColumn: line.length + 1,
              message: '–í–æ–∑–º–æ–∂–Ω–æ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–∫–æ–±–æ–∫ –∏–ª–∏ –∫–∞–≤—ã—á–µ–∫',
              shortMessage: '–ù–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Å–∫–æ–±–∫–∏/–∫–∞–≤—ã—á–∫–∏',
              code: 'syntax',
              source: 'Python Validator',
              isSyntaxError: true
            });
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–≤–æ–µ—Ç–æ—á–∏—è –ø–æ—Å–ª–µ control flow statements
          if (line.match(/^\s*(if|for|while|def|class|with|try|except|finally)\s+[^:]*$/)) {
            markers.push({
              severity: 8, // MarkerSeverity.Error
              startLineNumber: i + 1,
              startColumn: 1,
              endLineNumber: i + 1,
              endColumn: line.length + 1,
              message: '–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–≤–æ–µ—Ç–æ—á–∏–µ',
              shortMessage: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–≤–æ–µ—Ç–æ—á–∏–µ',
              code: 'syntax',
              source: 'Python Validator',
              isSyntaxError: true
            });
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
          const variableMatch = line.match(/\b(print|return|assert)\s*\(\s*([a-zA-Z_][a-zA-Z0-9_]*)\s*\)/);
          if (variableMatch && variableMatch[2]) {
            const varName = variableMatch[2];
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –≥–¥–µ-—Ç–æ –≤ —Ñ–∞–π–ª–µ
            if (!content.includes(`${varName} =`) && 
                !content.includes(`def ${varName}`) &&
                !content.includes(`class ${varName}`) &&
                !content.includes(`import ${varName}`) &&
                !content.includes(`from`) &&
                !['os', 'sys', 'math', 'random', 'datetime', 'time', 'json', 're', 'functools', 'collections'].includes(varName)) {
              markers.push({
                severity: 8, // MarkerSeverity.Error
                startLineNumber: i + 1,
                startColumn: line.indexOf(varName),
                endLineNumber: i + 1,
                endColumn: line.indexOf(varName) + varName.length,
                message: `–û—à–∏–±–∫–∞: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π "${varName}"`,
                shortMessage: `–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: ${varName}`,
                code: 'undefined-variable',
                source: 'Python Validator',
                isSyntaxError: false
              });
            }
          }
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
          const divisionByZeroMatch = line.match(/\b(\w+)\s*\/\s*(0|0\.0*)\b/);
          if (divisionByZeroMatch) {
            markers.push({
              severity: 8, // MarkerSeverity.Error
              startLineNumber: i + 1,
              startColumn: line.indexOf(divisionByZeroMatch[0]),
              endLineNumber: i + 1,
              endColumn: line.indexOf(divisionByZeroMatch[0]) + divisionByZeroMatch[0].length,
              message: '–û—à–∏–±–∫–∞: –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å',
              shortMessage: '–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å',
              code: 'division-by-zero',
              source: 'Python Validator',
              isSyntaxError: false
            });
          }
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏ –≤ —É—Å–ª–æ–≤–∏—è—Ö
          const emptyListCheck = line.match(/\bif\s+\[\s*\]\s*:/);
          if (emptyListCheck) {
            markers.push({
              severity: 4, // MarkerSeverity.Warning
              startLineNumber: i + 1,
              startColumn: line.indexOf('[]'),
              endLineNumber: i + 1,
              endColumn: line.indexOf('[]') + 2,
              message: '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ–≥–¥–∞ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è –∫–∞–∫ False',
              shortMessage: '–£—Å–ª–æ–≤–∏–µ —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º',
              code: 'empty-list-condition',
              source: 'Python Validator',
              isSyntaxError: false
            });
          }
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å None —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º == –≤–º–µ—Å—Ç–æ is
          const noneEqualityCheck = line.match(/\b(\w+)\s*==\s*None\b|\bNone\s*==\s*(\w+)\b/);
          if (noneEqualityCheck) {
            markers.push({
              severity: 4, // MarkerSeverity.Warning
              startLineNumber: i + 1,
              startColumn: line.indexOf(noneEqualityCheck[0]),
              endLineNumber: i + 1,
              endColumn: line.indexOf(noneEqualityCheck[0]) + noneEqualityCheck[0].length,
              message: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "is None" –≤–º–µ—Å—Ç–æ "== None"',
              shortMessage: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "is None"',
              code: 'none-equality',
              source: 'Python Validator',
              isSyntaxError: false
            });
          }
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–π —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ 
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –≤ —Ç–æ–º –∂–µ —Ñ–∞–π–ª–µ
          const funcCallMatch = line.match(/\b([a-zA-Z_][a-zA-Z0-9_]*)\(([^)]*)\)/);
          if (funcCallMatch) {
            const funcName = funcCallMatch[1];
            const argCount = funcCallMatch[2].split(',').filter(arg => arg.trim()).length;
            
            // –ü–æ–∏—Å–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
            const funcDefRegex = new RegExp(`def\\s+${funcName}\\s*\\(([^)]+)\\)`, 'g');
            const funcDefMatch = [...content.matchAll(funcDefRegex)];
            
            if (funcDefMatch.length > 0) {
              // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
              const funcDef = funcDefMatch[funcDefMatch.length - 1];
              const params = funcDef[1].split(',').filter(param => param.trim());
              
              // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–±–µ–∑ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
              const requiredParams = params.filter(param => !param.includes('=')).length;
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
              if (argCount < requiredParams) {
                markers.push({
                  severity: 8, // MarkerSeverity.Error
                  startLineNumber: i + 1,
                  startColumn: line.indexOf(funcCallMatch[0]),
                  endLineNumber: i + 1,
                  endColumn: line.indexOf(funcCallMatch[0]) + funcCallMatch[0].length,
                  message: `–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ "${funcName}". –û–∂–∏–¥–∞–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º ${requiredParams}, –ø–æ–ª—É—á–µ–Ω–æ ${argCount}`,
                  shortMessage: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è ${funcName}`,
                  code: 'arguments-count',
                  source: 'Python Validator',
                  isSyntaxError: false
                });
              }
            }
          }
        }
      } catch (parseErr) {
        console.warn('[Python] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞:', parseErr);
      }
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –≤ –º–æ–¥–µ–ª—å Monaco
    console.log(`[Python] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ ${markers.length} –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏ ${model.uri.toString()}`);
    window.monaco.editor.setModelMarkers(model, 'python', markers);

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –¥–µ–∫–æ—Ä–∞—Ü–∏–∏ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö —ç—Ç—É –º–æ–¥–µ–ª—å
    if (window.monaco.editor && window.monaco.editor.getEditors) {
      const editors = window.monaco.editor.getEditors().filter((editor: any) => 
        editor.getModel() && editor.getModel().uri.toString() === model.uri.toString()
      );

      if (editors.length > 0) {
        console.log(`[Python] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ–∫–æ—Ä–∞—Ü–∏–π –¥–ª—è ${editors.length} —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤`);
        
        editors.forEach((editor: any) => {
          try {
            // –ï—Å–ª–∏ –µ—Å—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è setup, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
            if (window.setupErrorDecorations && typeof window.setupErrorDecorations === 'function') {
              window.setupErrorDecorations(editor);
            } else {
              // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ–∫–æ—Ä–∞—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é
              // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –≤–∫–ª—é—á–µ–Ω—ã –Ω—É–∂–Ω—ã–µ –æ–ø—Ü–∏–∏
              editor.updateOptions({ 
                glyphMargin: true, 
                lineNumbers: 'on',
                minimap: { enabled: true } 
              });
              
              // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
              if (!document.getElementById('python-error-compact-styles')) {
                const style = document.createElement('style');
                style.id = 'python-error-compact-styles';
                style.innerHTML = `
                  .python-error-decoration { 
                    background-color: transparent !important; 
                    border-bottom: 1px wavy red !important;
                    border-left: 2px solid red !important;
                    margin: 0 !important;
                    padding: 0 !important;
                    max-height: 18px !important;
                  }
                  .python-warning-decoration { 
                    background-color: transparent !important; 
                    border-bottom: 1px wavy orange !important;
                    border-left: 2px solid orange !important;
                    margin: 0 !important;
                    padding: 0 !important;
                    max-height: 18px !important;
                  }
                  .python-error-inline { 
                    background-color: transparent !important;
                    border-bottom: 1px wavy red !important;
                    font-size: inherit !important;
                    line-height: inherit !important;
                    padding: 0 !important;
                    margin: 0 !important;
                  }
                  .python-warning-inline { 
                    background-color: transparent !important;
                    border-bottom: 1px wavy orange !important;
                    font-size: inherit !important;
                    line-height: inherit !important;
                    padding: 0 !important;
                    margin: 0 !important;
                  }
                  .error-glyph { 
                    width: 12px !important; 
                    height: 12px !important; 
                    display: inline-block !important;
                    margin-left: 3px !important;
                    background-color: transparent !important;
                    background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><circle cx="8" cy="8" r="7" fill="red"/><path d="M8 4v5M8 11v1" stroke="white" stroke-width="1.5" /></svg>') !important; 
                    background-size: 12px 12px !important;
                    background-repeat: no-repeat !important;
                    background-position: center !important;
                  }
                  .warning-glyph { 
                    width: 12px !important; 
                    height: 12px !important;
                    display: inline-block !important;
                    margin-left: 3px !important;
                    background-color: transparent !important;
                    background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path d="M7.5 2L1 13h13L7.5 2z" fill="orange"/><path d="M7.5 6v4M7.5 12v1" stroke="white" stroke-width="1.5" /></svg>') !important;
                    background-size: 12px 12px !important;
                    background-repeat: no-repeat !important;
                    background-position: center !important;
                  }
                  /* –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –ª–∏–Ω–∏–π –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ */
                  .monaco-editor .view-lines {
                    line-height: 1.3 !important;
                  }
                  .monaco-editor .view-line {
                    padding: 0 !important;
                    margin: 0 !important;
                    min-height: 0 !important;
                  }
                  /* –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫ */
                  .monaco-hover-content {
                    font-size: 12px !important;
                    line-height: 1.2 !important;
                    padding: 4px 6px !important;
                  }
                  .monaco-editor-hover {
                    max-width: 500px !important;
                  }
                `;
                document.head.appendChild(style);
              }
              
              // –°–æ–∑–¥–∞–µ–º –¥–µ–∫–æ—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Ä–∫–µ—Ä–æ–≤
              const errorDecorations = markers.map((marker: any) => {
                // –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
                let range;
                try {
                  range = {
                    startLineNumber: marker.startLineNumber,
                    startColumn: marker.startColumn, 
                    endLineNumber: marker.endLineNumber,
                    endColumn: marker.endColumn
                  };
                } catch (err) {
                  console.warn('[Python] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –º–∞—Ä–∫–µ—Ä–∞:', err);
                  return null;
                }

                return {
                  range: range,
                  options: {
                    className: marker.severity === 8 ? 'python-error-decoration' : 'python-warning-decoration',
                    hoverMessage: { value: marker.message },
                    inlineClassName: marker.severity === 8 ? 'python-error-inline' : 'python-warning-inline',
                    glyphMarginClassName: marker.severity === 8 ? 'error-glyph' : 'warning-glyph',
                    isWholeLine: false,
                    overviewRuler: {
                      color: marker.severity === 8 ? 'red' : 'orange',
                      position: window.monaco.editor.OverviewRulerLane.Right
                    }
                  }
                };
              }).filter(Boolean); // –£–±–∏—Ä–∞–µ–º null –∑–Ω–∞—á–µ–Ω–∏—è
              
              // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–µ–∫–æ—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–µ
              const oldDecorations = editor.getDecorationsInRange(model.getFullModelRange()) || [];
              const oldDecorationIds = oldDecorations
                .filter((d: any) => d.options.className?.includes('python-') || 
                                d.options.glyphMarginClassName?.includes('-glyph'))
                .map((d: any) => d.id);
              
              console.log(`[Python] –£–¥–∞–ª–µ–Ω–æ ${oldDecorationIds.length} —Å—Ç–∞—Ä—ã—Ö –¥–µ–∫–æ—Ä–∞—Ü–∏–π`);
              editor.deltaDecorations(oldDecorationIds, errorDecorations);
            }
          } catch (err) {
            console.error('[Python] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–µ–∫–æ—Ä–∞—Ü–∏–π:', err);
          }
        });
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –ø—Ä–æ–±–ª–µ–º, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    if (window.pythonDiagnosticsStore) {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      const storeMarkers = markers.map((marker: any) => ({
        severity: marker.severity === 8 ? 'error' : marker.severity === 4 ? 'warning' : 'info', // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        range: {
          start: { 
            line: marker.startLineNumber - 1, 
            character: marker.startColumn - 1 
          },
          end: {
            line: marker.endLineNumber - 1,
            character: marker.endColumn - 1
          }
        },
        message: marker.message,
        rawMessage: marker.shortMessage || marker.message,
        line: marker.startLineNumber,
        column: marker.startColumn,
        endLine: marker.endLineNumber,
        endColumn: marker.endColumn,
        source: marker.source || 'Python Validator',
        code: marker.code || (marker.isSyntaxError ? 'syntax-error' : undefined)
      }));
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      const fileUri = model.uri.toString();
      window.pythonDiagnosticsStore.setMarkers(fileUri, storeMarkers);
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –ø–∞–Ω–µ–ª–∏ –ø—Ä–æ–±–ª–µ–º
      const filePathFromUri = fileUri.replace('file://', '');
      const fileName = filePathFromUri.split('/').pop() || filePathFromUri.split('\\').pop() || 'unknown';
      
      // –û—Ä–≥–∞–Ω–∏–∑—É–µ–º –º–∞—Ä–∫–µ—Ä—ã –ø–æ —Ñ–∞–π–ª–∞–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–Ω–µ–ª–∏ –ø—Ä–æ–±–ª–µ–º
      const fileProblems = {
        filePath: filePathFromUri,
        fileName: fileName,
        issues: storeMarkers.map((marker: any) => ({
          severity: marker.severity,
          message: marker.message,
          rawMessage: marker.rawMessage || marker.message,
          line: marker.line || marker.range.start.line + 1,
          column: marker.column || marker.range.start.character + 1,
          endLine: marker.endLine || marker.range.end.line + 1,
          endColumn: marker.endColumn || marker.range.end.character + 1,
          source: marker.source,
          code: marker.code
        }))
      };
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤
        document.dispatchEvent(new CustomEvent('markers-updated', { 
          detail: { uri: fileUri, markers } 
        }));
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const allProblems = window.pythonDiagnosticsStore.getAllMarkersForUI() || [];
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–æ–±–ª–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
        const updatedProblems = allProblems.filter(p => p.filePath !== filePathFromUri);
        if (fileProblems.issues.length > 0) {
          updatedProblems.push(fileProblems);
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏ –ø—Ä–æ–±–ª–µ–º —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        const problemsEvent = new CustomEvent('python-diagnostics-updated', { 
          detail: { diagnostics: updatedProblems } 
        });
        document.dispatchEvent(problemsEvent);
      } catch (err) {
        console.error('[Python] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ UI:', err);
      }
    }
  } catch (error) {
    console.error('[Python] –û—à–∏–±–∫–∞ –≤ updatePythonDiagnostics:', error);
  }
};

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—à–∏–±–æ–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö Python —Ñ–∞–π–ª–æ–≤
 */
export function refreshPythonDiagnosticsDisplay() {
  console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫ Python –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞—Ö...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Monaco –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ–∫–æ—Ä–∞—Ü–∏–π
    if (!window.monaco || !window.setupErrorDecorations) {
      console.warn('Monaco –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è setupErrorDecorations –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã
    const editors = window.monaco.editor.getEditors();
    if (!editors || editors.length === 0) {
      console.log('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
      return;
    }
    
    console.log(`üé® –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ–∫–æ—Ä–∞—Ü–∏–π –¥–ª—è ${editors.length} –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–∫–æ—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    editors.forEach((editor: any) => {
      if (editor && editor.getModel()) {
        try {
          const model = editor.getModel();
          const languageId = model.getLanguageId();
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ Python —Ñ–∞–π–ª–æ–º
          if (languageId === 'python') {
            console.log(`üêç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ–∫–æ—Ä–∞—Ü–∏–π –¥–ª—è Python —Ñ–∞–π–ª–∞: ${model.uri.toString()}`);
            if (window.setupErrorDecorations) {
              window.setupErrorDecorations(editor);
            }
          }
        } catch (err) {
          console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–µ–∫–æ—Ä–∞—Ü–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞:', err);
        }
      }
    });
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏, –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –ø—Ä–æ–±–ª–µ–º
    if (window.pythonDiagnosticsStore) {
      try {
        const diagnostics = window.pythonDiagnosticsStore.getAllMarkersForUI() || [];
        document.dispatchEvent(new CustomEvent('python-diagnostics-updated', { 
          detail: { diagnostics } 
        }));
        console.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–∞–Ω–µ–ª—å –ø—Ä–æ–±–ª–µ–º —Å ${diagnostics.length} —Ñ–∞–π–ª–∞–º–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏`);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞–Ω–µ–ª–∏ –ø—Ä–æ–±–ª–µ–º:', err);
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫ Python:', error);
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–ª–∏ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö Python —Ñ–∞–π–ª–æ–≤
 */
window.updatePythonDiagnostics = async (filePath?: string): Promise<string> => {
  try {
    if (!pylspConnection) {
      console.error('[LSP] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Python LSP –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      return '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Python LSP –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ';
    }

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª
    if (filePath) {
      const uri = filePath;
      
      // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
      if (diagnosticsUpdateDebounce.has(uri)) {
        clearTimeout(diagnosticsUpdateDebounce.get(uri));
      }
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
      return new Promise((resolve) => {
        const timerId = setTimeout(async () => {
          try {
            // –ü–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            const normalizedPath = normalizePythonPath(uri);
            const result = await forcePythonDiagnosticsUpdate(normalizedPath);
            resolve(result);
          } catch (error) {
            console.error(`[LSP] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è ${uri}:`, error);
            resolve(`–û—à–∏–±–∫–∞: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
          } finally {
            // –£–¥–∞–ª—è–µ–º ID —Ç–∞–π–º–µ—Ä–∞ –∏–∑ Map
            diagnosticsUpdateDebounce.delete(uri);
          }
        }, diagnosticsUpdateDelay);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–∞–π–º–µ—Ä–∞
        diagnosticsUpdateDebounce.set(uri, timerId);
      });
    }
    
    // –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ Python-—Ñ–∞–π–ª—ã
    // –î–ª—è —ç—Ç–æ–≥–æ —Å–ª—É—á–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥
    const allFilesKey = '_all_files_';
    if (diagnosticsUpdateDebounce.has(allFilesKey)) {
      clearTimeout(diagnosticsUpdateDebounce.get(allFilesKey));
    }
    
    return new Promise((resolve) => {
      const timerId = setTimeout(async () => {
        try {
          // –ü–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
          const result = await updateAllPythonDiagnostics();
          resolve(result);
        } catch (error) {
          console.error('[LSP] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫:', error);
          resolve(`–û—à–∏–±–∫–∞: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        } finally {
          // –£–¥–∞–ª—è–µ–º ID —Ç–∞–π–º–µ—Ä–∞
          diagnosticsUpdateDebounce.delete(allFilesKey);
        }
      }, diagnosticsUpdateDelay);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–∞–π–º–µ—Ä–∞
      diagnosticsUpdateDebounce.set(allFilesKey, timerId);
    });
  } catch (error) {
    console.error('[LSP] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
    return `–û—à–∏–±–∫–∞: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
  }
};

/**
 * –û–±–Ω–æ–≤–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –¥–ª—è –≤—Å–µ—Ö Python-—Ñ–∞–π–ª–æ–≤ –∏ –æ–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
 */
export async function refreshAllPythonDiagnostics(): Promise<void> {
  try {
    console.log('üêç –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö Python —Ñ–∞–π–ª–æ–≤...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ –∏–∑ Monaco
    if (!window.monaco || !window.monaco.editor) {
      console.error('Monaco –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –º–æ–¥–µ–ª–∏
    const allModels = window.monaco.editor.getModels();
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ Python —Ñ–∞–π–ª—ã
    const pythonModels = allModels.filter(model => {
      const uri = model.uri.toString();
      return uri.endsWith('.py');
    });
    
    console.log(`üêç –ù–∞–π–¥–µ–Ω–æ ${pythonModels.length} Python —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);
    
    // –§–æ—Ä—Å–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
    for (const model of pythonModels) {
      try {
        const uri = model.uri.toString();
        const filePath = uri.replace('file://', '');
        
        console.log(`üêç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è ${filePath}`);
        await updatePythonDiagnosticsForFile(filePath);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–∞–º–∏ —Ñ–∞–π–ª–æ–≤
        await new Promise(resolve => setTimeout(resolve, 100));
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è –º–æ–¥–µ–ª–∏:', err);
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Å–µ—Ö —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞—Ö
    if (window.forceUpdateAllDecorations && typeof window.forceUpdateAllDecorations === 'function') {
      window.forceUpdateAllDecorations();
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    document.dispatchEvent(new CustomEvent('python-diagnostics-updated'));
    
    console.log('üêç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö Python —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö Python —Ñ–∞–π–ª–æ–≤:', error);
  }
}

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ
(window as any).refreshAllPythonDiagnostics = refreshAllPythonDiagnostics;

// –†–∞—Å—à–∏—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Window
declare global {
  interface Window {
    setupAllErrorDecorations?: () => void;
    forceUpdateAllDecorations?: () => void;
    globalMarkersStore?: Map<string, any[]>;
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–µ–∫—É—â–∏–µ Python –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–Ω–µ–ª–∏ –ø—Ä–æ–±–ª–µ–º
 * @returns –ú–∞—Å—Å–∏–≤ –ø—Ä–æ–±–ª–µ–º –ø–æ —Ñ–∞–π–ª–∞–º
 */
export function getPythonDiagnostics(): any[] {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    if (!window.pythonDiagnosticsStore) {
      console.warn('–•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Python –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
      return [];
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—Ä–∫–µ—Ä—ã –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    const allMarkers = window.pythonDiagnosticsStore.getAllMarkers();
    if (!allMarkers || typeof allMarkers !== 'object') {
      return [];
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Ä–∫–µ—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–∞–Ω–µ–ª–∏ –ø—Ä–æ–±–ª–µ–º
    const result: any[] = [];
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ URI –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    for (const [uri, markers] of Object.entries(allMarkers)) {
      if (!Array.isArray(markers) || markers.length === 0) {
        continue;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å —Ñ–∞–π–ª–∞ –∏–∑ URI
      let filePath = uri.replace('file://', '');
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç–∏ –¥–ª—è Windows
      filePath = filePath.replace(/^\/([a-zA-Z]:)/, '$1');
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –ø—É—Ç–∏
      const fileName = filePath.split('/').pop() || filePath.split('\\').pop() || 'unknown';
      
      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –¥–ª—è —Ñ–∞–π–ª–∞
      const fileProblems = {
        filePath,
        fileName,
        issues: markers.map((marker: any) => ({
          severity: marker.severity === 8 || marker.severity === 'error' ? 'error' : 
                   marker.severity === 4 || marker.severity === 'warning' ? 'warning' : 'info',
          message: marker.message || '',
          rawMessage: marker.rawMessage || marker.shortMessage || marker.message || '',
          line: marker.line || (marker.range?.start?.line ?? 0) + 1,
          column: marker.column || (marker.range?.start?.character ?? 0) + 1,
          endLine: marker.endLine || (marker.range?.end?.line ?? 0) + 1,
          endColumn: marker.endColumn || (marker.range?.end?.character ?? 0) + 1,
          source: marker.source || 'Python',
          code: marker.code
        }))
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
      if (fileProblems.issues.length > 0) {
        result.push(fileProblems);
      }
    }
    
    console.log(`üêç –ü–æ–ª—É—á–µ–Ω–æ ${result.length} —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏`);
    return result;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Python –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫:', error);
    return [];
  }
}

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ
(window as any).getPythonDiagnostics = getPythonDiagnostics;