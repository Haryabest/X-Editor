/**
 * Python LSP Starter
 * 
 * –ú–æ–¥—É–ª—å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Python LSP —Å–µ—Ä–≤–µ—Ä–æ–º
 */

import { languageServerManager } from './monaco-lsp-server-manager';
import { lspDocumentManager } from './lsp-document-manager';
import { MonacoLSPDiagnostics } from './monaco-lsp-diagnostics';

// –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∏–ø–æ–≤
import * as monaco from 'monaco-editor';

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ LSP
interface DiagnosticPosition {
  line: number;
  character: number;
}

interface DiagnosticRange {
  start: DiagnosticPosition;
  end: DiagnosticPosition;
}

interface Diagnostic {
  range: DiagnosticRange;
  severity?: DiagnosticSeverity;
  code?: string | number;
  source?: string;
  message: string;
  relatedInformation?: any[];
  tags?: number[];
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π –≤–∞–∂–Ω–æ—Å—Ç–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
enum DiagnosticSeverity {
  Error = 1,
  Warning = 2,
  Information = 3,
  Hint = 4
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
let pythonLSPInitialized = false;
let diagnosticHandlersInitialized = false;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Python LSP —Å–µ—Ä–≤–µ—Ä–∞
 * @returns –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
 */
export async function initializePythonLSP(): Promise<boolean> {
  console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Python LSP —Å–µ—Ä–≤–µ—Ä–∞...');
  
  if (pythonLSPInitialized) {
    console.log('Python LSP —Å–µ—Ä–≤–µ—Ä —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    return true;
  }
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —è–∑—ã–∫–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
    if (!languageServerManager) {
      console.error('–ú–µ–Ω–µ–¥–∂–µ—Ä —è–∑—ã–∫–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
      return false;
    }
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Python —Å–µ—Ä–≤–µ—Ä, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    if (!languageServerManager.getServer('python')) {
      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è Python LSP
      const pythonConfig = {
        id: 'python',
        name: 'Python Language Server',
        supportedLanguages: ['python'],
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Python LSP
        serverOptions: {
          // –£–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
          initializationOptions: {
            // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
            diagnostics: { enable: true, lint: { enabled: true } },
            completion: { enabled: true },
            hover: { enabled: true },
            // –í–∫–ª—é—á–∞–µ–º pylint –∏ pycodestyle –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            plugins: {
              pycodestyle: { enabled: true }, 
              pylint: { enabled: true },
              jedi_completion: { enabled: true },
              jedi_hover: { enabled: true },
              jedi_references: { enabled: true },
              jedi_definition: { enabled: true },
              jedi_symbols: { enabled: true },
              jedi_signature_help: { enabled: true },
              pyflakes: { enabled: true },
              mccabe: { enabled: true },
              preload: { enabled: true }
            }
          }
        }
      };
      
      languageServerManager.registerServer(pythonConfig);
      console.log('Python LSP —Å–µ—Ä–≤–µ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π');
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º Python —Å–µ—Ä–≤–µ—Ä
    const success = await languageServerManager.startServer('python');
    
    if (success) {
      console.log('Python LSP —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
      pythonLSPInitialized = true;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      if (!(window as any).pythonDiagnosticsStore) {
        console.warn('–•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Python –Ω–µ —Å–æ–∑–¥–∞–Ω–æ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ registerPython –±—ã–ª –≤—ã–∑–≤–∞–Ω.');
      }
      
      return true;
    } else {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Python LSP —Å–µ—Ä–≤–µ—Ä');
      return false;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Python LSP —Å–µ—Ä–≤–µ—Ä–∞:', error);
    return false;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Python LSP —Å–µ—Ä–≤–µ—Ä—É
 * @returns –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 */
export function isPythonLSPConnected(): boolean {
  try {
    if (!languageServerManager) return false;
    return languageServerManager.isServerRunning('python');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Python LSP —Å–µ—Ä–≤–µ—Ä—É:', error);
    return false;
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ Python LSP —Å–µ—Ä–≤–µ—Ä–∞
 * @returns –û–±—ä–µ–∫—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º —Å–µ—Ä–≤–µ—Ä–∞
 */
export function getPythonLSPStatus(): { running: boolean, message: string } {
  try {
    if (!languageServerManager) {
      return { running: false, message: '–ú–µ–Ω–µ–¥–∂–µ—Ä —è–∑—ã–∫–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω' };
    }
    
    const isRunning = languageServerManager.isServerRunning('python');
    
    if (isRunning) {
      return { 
        running: true, 
        message: 'Python LSP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç'
      };
    } else {
      return { running: false, message: 'Python LSP —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω' };
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ Python LSP —Å–µ—Ä–≤–µ—Ä–∞:', error);
    return { running: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞' };
  }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö Python —Ñ–∞–π–ª–æ–≤
 * @returns Promise —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
 */
export async function updateAllPythonDiagnostics(): Promise<boolean> {
  try {
    console.log('üêç –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö Python —Ñ–∞–π–ª–æ–≤...');
    
    if (!isPythonLSPConnected()) {
      console.warn('Python LSP —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
      const initialized = await initializePythonLSP();
      if (!initialized) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Python LSP —Å–µ—Ä–≤–µ—Ä');
        return false;
      }
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    const allDocuments = lspDocumentManager.getAllDocumentUris();
    if (!allDocuments || allDocuments.length === 0) {
      console.log('–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
      return true;
    }
    
    // –í—ã–±–∏—Ä–∞–µ–º Python –¥–æ–∫—É–º–µ–Ω—Ç—ã
    const pythonDocuments = allDocuments.filter(uri => 
      uri.endsWith('.py') || uri.endsWith('.pyw') || uri.endsWith('.pyi') ||
      lspDocumentManager.getDocument(uri)?.languageId === 'python'
    );
    
    if (pythonDocuments.length === 0) {
      console.log('–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö Python –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
      return true;
    }
    
    console.log(`üêç –û–±—Ä–∞–±–æ—Ç–∫–∞ ${pythonDocuments.length} Python —Ñ–∞–π–ª–æ–≤...`);
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ Python –¥–æ–∫—É–º–µ–Ω—Ç–∞
    for (const uri of pythonDocuments) {
      try {
        await updatePythonDiagnosticsForFile(uri);
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è ${uri}:`, error);
      }
    }
    
    console.log(`üêç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –¥–ª—è ${pythonDocuments.length} Python —Ñ–∞–π–ª–æ–≤`);
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö Python –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫:', error);
    return false;
  }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ Python —Ñ–∞–π–ª–∞
 * @param filepath –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ URI
 * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export async function updatePythonDiagnosticsForFile(filepath: string): Promise<boolean> {
  try {
    console.log('üêç Python diagnostics requested for file:', filepath);
    console.log('Debug: Current Python LSP status:', getPythonLSPStatus());
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LSP, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    if (!isPythonLSPConnected()) {
      console.warn(`Python LSP —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...`);
      const initialized = await initializePythonLSP();
      console.log('Debug: Python LSP initialization result:', initialized);
      if (!initialized) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Python LSP —Å–µ—Ä–≤–µ—Ä');
        return false;
      }
    }
    
    console.log(`üêç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è: ${filepath}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª Python-—Ñ–∞–π–ª–æ–º
    const isPythonFile = filepath.endsWith('.py') || filepath.endsWith('.pyw') || 
                         filepath.endsWith('.pyi') || 
                         lspDocumentManager.getDocument(filepath)?.languageId === 'python';
    
    if (!isPythonFile) {
      console.warn(`–§–∞–π–ª ${filepath} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Python —Ñ–∞–π–ª–æ–º`);
      return false;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ LSP
    let doc = lspDocumentManager.getDocument(filepath);
    console.log('Debug: Found document in LSP manager:', !!doc);
    
    // –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –µ–≥–æ –ø–æ –¥—Ä—É–≥–æ–º—É URI –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å
    if (!doc) {
      // –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ –¥—Ä—É–≥–æ–º—É URI
      const allUris = lspDocumentManager.getAllDocumentUris();
      const matchingUri = allUris.find(uri => 
        uri.includes(filepath) || filepath.includes(uri.replace('file://', ''))
      );
      
      if (matchingUri) {
        doc = lspDocumentManager.getDocument(matchingUri);
        console.log(`–ù–∞–π–¥–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ URI: ${matchingUri}`);
      }
      
      // –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ
      if (!doc) {
        try {
          console.log(`–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π: ${filepath}`);
          
          // –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ API
          let content = '';
          try {
            const response = await fetch(`/api/file?path=${encodeURIComponent(filepath)}`);
            if (response.ok) {
              content = await response.text();
              console.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ (${content.length} –±–∞–π—Ç)`);
            } else {
              console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞: ${response.statusText}`);
              return false;
            }
          } catch (err) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ API:`, err);
            
            // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Monaco
            try {
              if (window.monaco) {
                const fileUri = window.monaco.Uri.file(filepath);
                const model = window.monaco.editor.getModel(fileUri);
                
                if (model) {
                  content = model.getValue();
                  console.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ –º–æ–¥–µ–ª–∏ Monaco (${content.length} –±–∞–π—Ç)`);
                } else {
                  console.warn(`–ú–æ–¥–µ–ª—å Monaco –¥–ª—è ${filepath} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
                }
              }
            } catch (monacoErr) {
              console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –º–æ–¥–µ–ª–∏ Monaco:`, monacoErr);
            }
            
            if (!content) {
              return false;
            }
          }
          
          // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è URI
          let fileUri = filepath;
          if (!fileUri.startsWith('file://')) {
            fileUri = `file://${fileUri.replace(/\\/g, '/')}`;
          }
          
          // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ –º–µ–Ω–µ–¥–∂–µ—Ä
          lspDocumentManager.addDocument(fileUri, 'python', content);
          console.log(`–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ LSP: ${fileUri}`);
          
          // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
          doc = lspDocumentManager.getDocument(fileUri);
          
          // –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–∞–∂–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –ø—É—Ç–∏
          if (!doc) {
            doc = lspDocumentManager.getDocument(filepath);
          }
          
          if (!doc) {
            console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç: ${filepath}`);
            return false;
          }
        } catch (err) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${filepath}`, err);
          return false;
        }
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    if (!(window as any).pythonDiagnosticsStore) {
      console.warn('–•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Python –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    let content = '';
    let version = doc.version || 1;
    
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
      if (doc.textDocument && typeof doc.textDocument.getText === 'function') {
        content = doc.textDocument.getText();
      } else if ((doc as any).content) {
        content = (doc as any).content;
      }
      
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã
      if (!content) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–æ–¥–µ–ª—å Monaco –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
        if (window.monaco) {
          try {
            const fileUri = window.monaco.Uri.file(filepath);
            const model = window.monaco.editor.getModel(fileUri);
            
            if (model) {
              content = model.getValue();
              console.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ –º–æ–¥–µ–ª–∏ Monaco (${content.length} –±–∞–π—Ç)`);
            }
          } catch (monacoErr) {
            console.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –º–æ–¥–µ–ª–∏ Monaco:`, monacoErr);
          }
        }
        
        // –ï—Å–ª–∏ –≤—Å—ë –µ—â–µ –Ω–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ API
        if (!content) {
          try {
            const response = await fetch(`/api/file?path=${encodeURIComponent(filepath)}`);
            if (response.ok) {
              content = await response.text();
              console.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ API (${content.length} –±–∞–π—Ç)`);
            } else {
              console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —á–µ—Ä–µ–∑ API: ${response.statusText}`);
            }
          } catch (apiErr) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ API:`, apiErr);
          }
        }
      }
    } catch (contentErr) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞:`, contentErr);
    }
    
    if (!content) {
      console.warn(`–ü—É—Å—Ç–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${filepath}`);
      return false;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ LSP –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
    try {
      console.log(`üêç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è —Ñ–∞–π–ª–∞ ${doc.uri}...`);
      
      // –°–Ω–∞—á–∞–ª–∞ —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
      languageServerManager.sendNotification('python', 'textDocument/didOpen', {
        textDocument: {
          uri: doc.uri,
          languageId: 'python',
          version: version,
          text: content
        }
      });
      console.log(`üêç –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ didOpen –¥–ª—è: ${doc.uri}`);
      
      // –ó–∞—Ç–µ–º —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
      languageServerManager.sendNotification('python', 'textDocument/didChange', {
        textDocument: {
          uri: doc.uri,
          version: version + 1
        },
        contentChanges: [{ text: content }]
      });
      console.log(`üêç –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ didChange –¥–ª—è: ${doc.uri}`);
      
      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
      let diagnosticsFound = false;
      
      if (window.monaco) {
        try {
          const monacoUri = window.monaco.Uri.file(filepath);
          const markers = window.monaco.editor.getModelMarkers({ resource: monacoUri });
          
          if (markers && markers.length > 0) {
            console.log(`üêç –ù–∞–π–¥–µ–Ω–æ ${markers.length} –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è —Ñ–∞–π–ª–∞ ${filepath}`);
            diagnosticsFound = true;
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–æ–≤
            document.dispatchEvent(new CustomEvent('markers-updated'));
          } else {
            console.log(`üêç –ú–∞—Ä–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Ñ–∞–π–ª–∞ ${filepath}`);
          }
        } catch (err) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–æ–≤: ${err}`);
        }
      }
      
      // –ï—Å–ª–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã
      if (!diagnosticsFound && (window as any).pythonDiagnosticsStore) {
        try {
          let monacoUri;
          try {
            monacoUri = window.monaco.Uri.parse(doc.uri);
          } catch (e) {
            monacoUri = window.monaco.Uri.file(filepath);
          }
          
          (window as any).pythonDiagnosticsStore.clearMarkers(monacoUri.toString());
          console.log(`üêç –û—á–∏—â–µ–Ω—ã –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è: ${filepath}`);
          
          // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–æ–≤
          document.dispatchEvent(new CustomEvent('markers-updated'));
        } catch (clearErr) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –º–∞—Ä–∫–µ—Ä–æ–≤:`, clearErr);
        }
      }
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ–∫–æ—Ä–∞—Ü–∏–∏ –æ—à–∏–±–æ–∫ –∫ –∞–∫—Ç–∏–≤–Ω–æ–º—É —Ä–µ–¥–∞–∫—Ç–æ—Ä—É
      if (window.monaco && window.setupErrorDecorations && typeof window.setupErrorDecorations === 'function') {
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–µ–∫–æ—Ä–∞—Ü–∏–∏
        const editors = window.monaco.editor.getEditors();
        if (editors && editors.length > 0) {
          console.log(`üé® –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ–∫–æ—Ä–∞—Ü–∏–π –¥–ª—è ${editors.length} —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤ –ø–æ—Å–ª–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏`);
          editors.forEach((editor: any) => {
            try {
              if (window.setupErrorDecorations) {
                window.setupErrorDecorations(editor);
              }
            } catch (err) {
              console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–µ–∫–æ—Ä–∞—Ü–∏–π:', err);
            }
          });
        } else {
          console.log('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ–∫–æ—Ä–∞—Ü–∏–π');
        }
      }
      
      return true;
    } catch (error) {
      console.error(`üêç –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ${filepath}`, error);
      return false;
    }
  } catch (error) {
    console.error(`üêç –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Python –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ${filepath}`, error);
    return false;
  }
}

/**
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è Python —Ñ–∞–π–ª–∞
 * @param filepath –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ URI
 * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export async function forcePythonDiagnosticsUpdate(filepath: string) {
  console.log(`üêç –†—É—á–Ω–æ–π –∑–∞–ø—Ä–æ—Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è: ${filepath}`);
  
  const result = await updatePythonDiagnosticsForFile(filepath);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –Ω–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏
  if (result && typeof window !== 'undefined' && (window as any).pythonDiagnosticsStore) {
    // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    const diagnosticsStore = (window as any).pythonDiagnosticsStore;
    
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –º–æ–¥–µ–ª—å URI –¥–ª—è —Ñ–∞–π–ª–∞
      let fileUri: string;
      
      if (filepath.startsWith('file://')) {
        fileUri = filepath;
      } else {
        fileUri = `file://${filepath.replace(/\\/g, '/')}`;
      }
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ URI
      let monacoUri: string;
      try {
        if (window.monaco) {
          monacoUri = window.monaco.Uri.file(filepath.replace(/\\/g, '/')).toString();
        } else {
          monacoUri = fileUri;
        }
      } catch (e) {
        monacoUri = fileUri;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–µ –≤–µ—Ä—Å–∏–∏ URI
      let markers = diagnosticsStore.getMarkers(fileUri);
      if (!markers || markers.length === 0) {
        markers = diagnosticsStore.getMarkers(monacoUri);
      }
      
      // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –º–∞—Ä–∫–µ—Ä—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      if (markers && markers.length > 0) {
        console.log(`üêç –ù–∞–π–¥–µ–Ω–æ ${markers.length} –ø—Ä–æ–±–ª–µ–º –≤ —Ñ–∞–π–ª–µ ${filepath}`);
        
        const errorCount = markers.filter((m: any) => 
          m.severity === (window.monaco?.MarkerSeverity.Error || 8)
        ).length;
        
        const warningCount = markers.filter((m: any) => 
          m.severity === (window.monaco?.MarkerSeverity.Warning || 4)
        ).length;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const message = `Python: ${errorCount} –æ—à–∏–±–æ–∫, ${warningCount} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π`;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if (errorCount > 0 || warningCount > 0) {
          document.dispatchEvent(new CustomEvent('show-notification', {
            detail: {
              message,
              type: errorCount > 0 ? 'error' : 'warning',
              duration: 5000
            }
          }));
        }
      } else {
        console.log(`üêç –ü—Ä–æ–±–ª–µ–º –≤ —Ñ–∞–π–ª–µ ${filepath} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        document.dispatchEvent(new CustomEvent('show-notification', {
          detail: {
            message: 'Python: –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
            type: 'success',
            duration: 3000
          }
        }));
      }
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ–∫–æ—Ä–∞—Ü–∏–∏ –æ—à–∏–±–æ–∫ –∫ –∞–∫—Ç–∏–≤–Ω–æ–º—É —Ä–µ–¥–∞–∫—Ç–æ—Ä—É
      if (window.monaco && window.setupErrorDecorations && typeof window.setupErrorDecorations === 'function') {
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–µ–∫–æ—Ä–∞—Ü–∏–∏
        const editors = window.monaco.editor.getEditors();
        if (editors && editors.length > 0) {
          console.log(`üé® –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ–∫–æ—Ä–∞—Ü–∏–π –¥–ª—è ${editors.length} —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤ –ø–æ—Å–ª–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏`);
          editors.forEach((editor: any) => {
            try {
              if (window.setupErrorDecorations) {
                window.setupErrorDecorations(editor);
              }
            } catch (err) {
              console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–µ–∫–æ—Ä–∞—Ü–∏–π:', err);
            }
          });
        } else {
          console.log('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ–∫–æ—Ä–∞—Ü–∏–π');
        }
      }
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', e);
    }
  }
  
  return result;
}

/**
 * –û—á–∏—Å—Ç–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö Python —Ñ–∞–π–ª–æ–≤
 */
export function clearAllPythonDiagnostics(): void {
  if ((window as any).pythonDiagnosticsStore) {
    (window as any).pythonDiagnosticsStore.clearAllMarkers();
    console.log('–û—á–∏—â–µ–Ω—ã –≤—Å–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Python');
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Python
 */
export function isPythonDiagnosticsAvailable(): boolean {
  return !!(window as any).pythonDiagnosticsStore;
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –≤–∞–∂–Ω–æ—Å—Ç–∏ LSP –≤ —É—Ä–æ–≤–µ–Ω—å Monaco
 * @param severity –£—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
 * @returns –£—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏ –¥–ª—è Monaco
 */
const mapSeverity = (severity: DiagnosticSeverity | undefined): number => {
  if (!severity) return 1; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Info

  switch (severity) {
    case DiagnosticSeverity.Error:
      return 8; // monaco.MarkerSeverity.Error
    case DiagnosticSeverity.Warning:
      return 4; // monaco.MarkerSeverity.Warning
    case DiagnosticSeverity.Information:
      return 2; // monaco.MarkerSeverity.Info
    case DiagnosticSeverity.Hint:
      return 1; // monaco.MarkerSeverity.Hint
    default:
      return 2; // Info –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  }
};

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Python –¥–ª—è –º–æ–¥–µ–ª–∏
 * @param model –ú–æ–¥–µ–ª—å —Ç–µ–∫—Å—Ç–∞ Monaco
 * @param pyDiags –ú–∞—Å—Å–∏–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫ Python
 */
const updatePythonDiagnostics = (
  model: any, // –ò—Å–ø–æ–ª—å–∑—É–µ–º any –¥–ª—è –º–æ–¥–µ–ª–∏ Monaco
  pyDiags: Diagnostic[]
) => {
  if (!model || !window.monaco?.editor?.setModelMarkers) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É: Monaco –∏–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
    return;
  }

  try {
    const markers = pyDiags.map((diag) => {
      const startPos = diag.range.start;
      const endPos = diag.range.end;
      
      // –î–µ–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º–∏
      let message = diag.message;
      
      // –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (message.length > 100) {
        message = message.substring(0, 97) + '...';
      }
      
      // –£–¥–∞–ª—è–µ–º –∏–∑–±—ã—Ç–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      message = message
        .replace(/Python \[\d+(\.\d+)*\]/g, '')
        .replace(/\(pycodestyle\)/g, '')
        .replace(/\(pylint\)/g, '')
        .replace(/\(mypy\)/g, '')
        .replace(/\(pyflakes\)/g, '')
        .replace(/(^\s+|\s+$)/g, ''); // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ

      return {
        severity: mapSeverity(diag.severity),
        startLineNumber: startPos.line + 1,
        startColumn: startPos.character + 1,
        endLineNumber: endPos.line + 1,
        endColumn: endPos.character + 1,
        message: message,
        code: diag.code,
        source: 'Python', // –£–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
      };
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –≤ –º–æ–¥–µ–ª—å Monaco
    console.log(`[Python] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ ${markers.length} –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏ ${model.uri.toString()}`);
    window.monaco.editor.setModelMarkers(model, 'python', markers);

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –¥–µ–∫–æ—Ä–∞—Ü–∏–∏ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö —ç—Ç—É –º–æ–¥–µ–ª—å
    if (window.monaco.editor && window.monaco.editor.getEditors) {
      const editors = window.monaco.editor.getEditors().filter((editor: any) => 
        editor.getModel() && editor.getModel().uri.toString() === model.uri.toString()
      );

      if (editors.length > 0) {
        console.log(`[Python] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ–∫–æ—Ä–∞—Ü–∏–π –¥–ª—è ${editors.length} —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤`);
        
        editors.forEach((editor: any) => {
          try {
            // –ï—Å–ª–∏ –µ—Å—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è setup, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
            if (window.setupErrorDecorations && typeof window.setupErrorDecorations === 'function') {
              window.setupErrorDecorations(editor);
            } else {
              // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ–∫–æ—Ä–∞—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é
              // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –≤–∫–ª—é—á–µ–Ω—ã –Ω—É–∂–Ω—ã–µ –æ–ø—Ü–∏–∏
              editor.updateOptions({ 
                glyphMargin: true, 
                lineNumbers: 'on',
                minimap: { enabled: true } 
              });
              
              // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
              if (!document.getElementById('python-error-styles')) {
                const style = document.createElement('style');
                style.id = 'python-error-styles';
                style.innerHTML = `
                  .python-error-decoration { 
                    background-color: rgba(255, 0, 0, 0.1) !important; 
                    border-bottom: 1px wavy red !important; 
                  }
                  .python-warning-decoration { 
                    background-color: rgba(255, 165, 0, 0.1) !important; 
                    border-bottom: 1px wavy orange !important; 
                  }
                  .python-error-inline { 
                    text-decoration: wavy underline red !important; 
                  }
                  .python-warning-inline { 
                    text-decoration: wavy underline orange !important; 
                  }
                  .error-glyph { 
                    width: 12px !important; 
                    height: 12px !important; 
                    display: inline-block !important;
                    margin-left: 3px !important;
                    background-color: transparent !important;
                    background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><circle cx="8" cy="8" r="7" fill="red"/><path d="M8 4v5M8 11v1" stroke="white" stroke-width="1.5" /></svg>') !important; 
                    background-size: 12px 12px !important;
                    background-repeat: no-repeat !important;
                    background-position: center !important;
                  }
                  .warning-glyph { 
                    width: 12px !important; 
                    height: 12px !important;
                    display: inline-block !important;
                    margin-left: 3px !important;
                    background-color: transparent !important;
                    background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path d="M7.5 2L1 13h13L7.5 2z" fill="orange"/><path d="M7.5 6v4M7.5 12v1" stroke="white" stroke-width="1.5" /></svg>') !important;
                    background-size: 12px 12px !important;
                    background-repeat: no-repeat !important;
                    background-position: center !important;
                  }
                `;
                document.head.appendChild(style);
              }
              
              // –°–æ–∑–¥–∞–µ–º –¥–µ–∫–æ—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Ä–∫–µ—Ä–æ–≤
              const errorDecorations = markers.map((marker: any) => {
                // –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
                let range;
                try {
                  range = {
                    startLineNumber: marker.startLineNumber,
                    startColumn: marker.startColumn, 
                    endLineNumber: marker.endLineNumber,
                    endColumn: marker.endColumn
                  };
                } catch (err) {
                  console.warn('[Python] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –º–∞—Ä–∫–µ—Ä–∞:', err);
                  return null;
                }

                return {
                  range: range,
                  options: {
                    className: marker.severity === 8 ? 'python-error-decoration' : 'python-warning-decoration',
                    hoverMessage: { value: marker.message },
                    inlineClassName: marker.severity === 8 ? 'python-error-inline' : 'python-warning-inline',
                    glyphMarginClassName: marker.severity === 8 ? 'error-glyph' : 'warning-glyph',
                    overviewRuler: {
                      color: marker.severity === 8 ? 'red' : 'orange',
                      position: window.monaco.editor.OverviewRulerLane.Right
                    }
                  }
                };
              }).filter(Boolean); // –£–±–∏—Ä–∞–µ–º null –∑–Ω–∞—á–µ–Ω–∏—è
              
              // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–µ–∫–æ—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–µ
              const oldDecorations = editor.getDecorationsInRange(model.getFullModelRange()) || [];
              const oldDecorationIds = oldDecorations
                .filter((d: any) => d.options.className?.includes('python-') || 
                                d.options.glyphMarginClassName?.includes('-glyph'))
                .map((d: any) => d.id);
              
              console.log(`[Python] –£–¥–∞–ª–µ–Ω–æ ${oldDecorationIds.length} —Å—Ç–∞—Ä—ã—Ö –¥–µ–∫–æ—Ä–∞—Ü–∏–π`);
              editor.deltaDecorations(oldDecorationIds, errorDecorations);
              
              // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
              setTimeout(() => {
                editor.layout();
                editor.render(true);
              }, 100);
            }
          } catch (err) {
            console.error('[Python] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–µ–∫–æ—Ä–∞—Ü–∏–π:', err);
          }
        });
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –ø—Ä–æ–±–ª–µ–º, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    if (window.pythonDiagnosticsStore) {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      const storeMarkers = markers.map((marker: any) => ({
        severity: marker.severity,
        range: {
          start: { 
            line: marker.startLineNumber - 1, 
            character: marker.startColumn - 1 
          },
          end: {
            line: marker.endLineNumber - 1,
            character: marker.endColumn - 1
          }
        },
        message: marker.message,
        source: marker.source
      }));
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      window.pythonDiagnosticsStore.setMarkers(model.uri.toString(), storeMarkers);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
      try {
        document.dispatchEvent(new CustomEvent('markers-updated', { 
          detail: { uri: model.uri.toString(), markers } 
        }));
        
        const problemsEvent = new CustomEvent('python-diagnostics-updated', { 
          detail: { diagnostics: window.pythonDiagnosticsStore.getAllMarkersForUI() || [] } 
        });
        document.dispatchEvent(problemsEvent);
      } catch (err) {
        console.error('[Python] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ UI:', err);
      }
    }
  } catch (error) {
    console.error('[Python] –û—à–∏–±–∫–∞ –≤ updatePythonDiagnostics:', error);
  }
};

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—à–∏–±–æ–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö Python —Ñ–∞–π–ª–æ–≤
 */
export function refreshPythonDiagnosticsDisplay() {
  console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫ Python –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞—Ö...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Monaco –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ–∫–æ—Ä–∞—Ü–∏–π
    if (!window.monaco || !window.setupErrorDecorations) {
      console.warn('Monaco –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è setupErrorDecorations –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã
    const editors = window.monaco.editor.getEditors();
    if (!editors || editors.length === 0) {
      console.log('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
      return;
    }
    
    console.log(`üé® –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ–∫–æ—Ä–∞—Ü–∏–π –¥–ª—è ${editors.length} –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–∫–æ—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    editors.forEach((editor: any) => {
      if (editor && editor.getModel()) {
        try {
          const model = editor.getModel();
          const languageId = model.getLanguageId();
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ Python —Ñ–∞–π–ª–æ–º
          if (languageId === 'python') {
            console.log(`üêç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ–∫–æ—Ä–∞—Ü–∏–π –¥–ª—è Python —Ñ–∞–π–ª–∞: ${model.uri.toString()}`);
            if (window.setupErrorDecorations) {
              window.setupErrorDecorations(editor);
            }
          }
        } catch (err) {
          console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–µ–∫–æ—Ä–∞—Ü–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞:', err);
        }
      }
    });
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏, –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –ø—Ä–æ–±–ª–µ–º
    if (window.pythonDiagnosticsStore) {
      try {
        const diagnostics = window.pythonDiagnosticsStore.getAllMarkersForUI() || [];
        document.dispatchEvent(new CustomEvent('python-diagnostics-updated', { 
          detail: { diagnostics } 
        }));
        console.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–∞–Ω–µ–ª—å –ø—Ä–æ–±–ª–µ–º —Å ${diagnostics.length} —Ñ–∞–π–ª–∞–º–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏`);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞–Ω–µ–ª–∏ –ø—Ä–æ–±–ª–µ–º:', err);
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫ Python:', error);
  }
}